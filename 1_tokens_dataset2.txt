stackoverflow
questions
git
related
1
how
do
i
undo
the
most
recent
local
commits
in
git
i
accidentally
committed
the
wrong
files
to
git
but
i
haven't
pushed
the
commit
to
the
server
yet
how
can
i
undo
those
commits
from
the
local
repository
best
answer
undo
a
commit
and
redo
git
commit
m
something
terribly
misguided
1
git
reset
head
2
edit
files
as
necessary
3
git
add
4
git
commit
c
orig
head
5
1
this
is
what
you
want
to
undo
2
this
does
nothing
to
your
working
tree
the
state
of
your
files
on
disk
but
undoes
the
commit
and
leaves
the
changes
you
committed
unstaged
so
they'll
appear
as
changes
not
staged
for
commit
in
git
status
so
you'll
need
to
add
them
again
before
committing
if
you
only
want
to
add
more
changes
to
the
previous
commit
or
change
the
commit
message1
you
could
use
git
reset
soft
head
instead
which
is
like
git
reset
head
2
but
leaves
your
existing
changes
staged
3
make
corrections
to
working
tree
files
4
git
add
anything
that
you
want
to
include
in
your
new
commit
5
commit
the
changes
reusing
the
old
commit
message
reset
copied
the
old
head
to
git
orig
head
commit
with
c
orig
head
will
open
an
editor
which
initially
contains
the
log
message
from
the
old
commit
and
allows
you
to
edit
it
if
you
do
not
need
to
edit
the
message
you
could
use
the
c
option
beware
however
that
if
you
have
added
any
new
changes
to
the
index
using
commit
amend
will
add
them
to
your
previous
commit
if
the
code
is
already
pushed
to
your
server
and
you
have
permissions
to
overwrite
history
rebase
then
git
push
origin
master
force
you
can
also
look
at
this
answer
how
can
i
move
head
back
to
a
previous
location
detached
head
undo
commits
the
above
answer
will
show
you
git
reflog
which
you
can
use
to
determine
the
sha
1
for
the
commit
to
which
you
wish
to
revert
once
you
have
this
value
use
the
sequence
of
commands
as
explained
above
1
note
however
that
you
don't
need
to
reset
to
an
earlier
commit
if
you
just
made
a
mistake
in
your
commit
message
the
easier
option
is
to
git
reset
to
unstage
any
changes
you've
made
since
and
then
git
commit
amend
which
will
open
your
default
commit
message
editor
pre
populated
with
the
last
commit
message
2
head
is
the
same
as
head
1
also
see
what
is
the
head
in
git
it's
helpful
if
you
want
to
uncommit
multiple
commits
2
what
is
the
difference
between
'git
pull'
and
'git
fetch'
what
are
the
differences
between
git
pull
and
git
fetch
best
answer
in
the
simplest
terms
git
pull
does
a
git
fetch
followed
by
a
git
merge
you
can
do
a
git
fetch
at
any
time
to
update
your
remote
tracking
branches
under
refs
remotes
remote
this
operation
never
changes
any
of
your
own
local
branches
under
refs
heads
and
is
safe
to
do
without
changing
your
working
copy
i
have
even
heard
of
people
running
git
fetch
periodically
in
a
cron
job
in
the
background
although
i
wouldn't
recommend
doing
this
a
git
pull
is
what
you
would
do
to
bring
a
local
branch
up
to
date
with
its
remote
version
while
also
updating
your
other
remote
tracking
branches
from
the
git
documentation
for
git
pull
in
its
default
mode
git
pull
is
shorthand
for
git
fetch
followed
by
git
merge
fetch
head
3
how
do
i
update
a
github
forked
repository
i
recently
forked
a
project
and
applied
several
fixes
i
then
created
a
pull
request
which
was
then
accepted
a
few
days
later
another
change
was
made
by
another
contributor
so
my
fork
doesn't
contain
that
change
how
can
i
get
that
change
into
my
fork
do
i
need
to
delete
and
re
create
my
fork
when
i
have
further
changes
to
contribute
or
is
there
an
update
button
best
answer
in
your
local
clone
of
your
forked
repository
you
can
add
the
original
github
repository
as
a
remote
remotes
are
like
nicknames
for
the
urls
of
repositories
origin
is
one
for
example
then
you
can
fetch
all
the
branches
from
that
upstream
repository
and
rebase
your
work
to
continue
working
on
the
upstream
version
in
terms
of
commands
that
might
look
like
add
the
remote
call
it
upstream
git
remote
add
upstream
https
github
com
whoever
whatever
git
fetch
all
the
branches
of
that
remote
into
remote
tracking
branches
such
as
upstream
main
or
upstream
master
git
fetch
upstream
make
sure
that
you're
on
your
main
branch
git
checkout
main
rewrite
your
main
branch
so
that
any
commits
of
yours
that
aren't
already
in
upstream
main
are
replayed
on
top
of
that
other
branch
git
rebase
upstream
main
if
you
don't
want
to
rewrite
the
history
of
your
main
branch
for
example
because
other
people
may
have
cloned
it
then
you
should
replace
the
last
command
with
git
merge
upstream
main
however
for
making
further
pull
requests
that
are
as
clean
as
possible
it's
probably
better
to
rebase
if
you've
rebased
your
branch
onto
upstream
main
you
may
need
to
force
the
push
in
order
to
push
it
to
your
own
forked
repository
on
github
you'd
do
that
with
git
push
f
origin
main
you
only
need
to
use
the
f
the
first
time
after
you've
rebased
4
how
do
i
undo
'git
add'
before
commit
i
mistakenly
added
files
to
git
using
the
command
git
add
myfile
txt
i
have
not
yet
run
git
commit
is
there
a
way
to
undo
this
so
these
files
won't
be
included
in
the
commit
best
answer
you
can
undo
git
add
before
commit
with
git
reset
file
which
will
remove
it
from
the
current
index
the
about
to
be
committed
list
without
changing
anything
else
you
can
use
git
reset
without
any
file
name
to
unstage
all
due
changes
this
can
come
in
handy
when
there
are
too
many
files
to
be
listed
one
by
one
in
a
reasonable
amount
of
time
in
old
versions
of
git
the
above
commands
are
equivalent
to
git
reset
head
file
and
git
reset
head
respectively
and
will
fail
if
head
is
undefined
because
you
haven't
yet
made
any
commits
in
your
repository
or
ambiguous
because
you
created
a
branch
called
head
which
is
a
stupid
thing
that
you
shouldn't
do
this
was
changed
in
git
1
8
2
though
so
in
modern
versions
of
git
you
can
use
the
commands
above
even
prior
to
making
your
first
commit
git
reset
without
options
or
parameters
used
to
error
out
when
you
do
not
have
any
commits
in
your
history
but
it
now
gives
you
an
empty
index
to
match
non
existent
commit
you
are
not
even
on
5
how
to
modify
existing
unpushed
commit
messages
i
wrote
the
wrong
thing
in
a
commit
message
how
can
i
change
the
message
the
commit
has
not
been
pushed
yet
best
answer
amending
the
most
recent
commit
message
git
commit
amend
will
open
your
editor
allowing
you
to
change
the
commit
message
of
the
most
recent
commit
additionally
you
can
set
the
commit
message
directly
in
the
command
line
with
git
commit
amend
m
new
commit
message
…however
this
can
make
multi
line
commit
messages
or
small
corrections
more
cumbersome
to
enter
make
sure
you
don't
have
any
working
copy
changes
staged
before
doing
this
or
they
will
get
committed
too
unstaged
changes
will
not
get
committed
changing
the
message
of
a
commit
that
you've
already
pushed
to
your
remote
branch
if
you've
already
pushed
your
commit
up
to
your
remote
branch
then
after
amending
your
commit
locally
as
described
above
you'll
also
need
to
force
push
the
commit
with
git
push
remote
branch
force
or
git
push
remote
branch
f
warning
force
pushing
will
overwrite
the
remote
branch
with
the
state
of
your
local
one
if
there
are
commits
on
the
remote
branch
that
you
don't
have
in
your
local
branch
you
will
lose
those
commits
warning
be
cautious
about
amending
commits
that
you
have
already
shared
with
other
people
amending
commits
essentially
rewrites
them
to
have
different
sha
ids
which
poses
a
problem
if
other
people
have
copies
of
the
old
commit
that
you've
rewritten
anyone
who
has
a
copy
of
the
old
commit
will
need
to
synchronize
their
work
with
your
newly
re
written
commit
which
can
sometimes
be
difficult
so
make
sure
you
coordinate
with
others
when
attempting
to
rewrite
shared
commit
history
or
just
avoid
rewriting
shared
commits
altogether
perform
an
interactive
rebase
another
option
is
to
use
interactive
rebase
this
allows
you
to
edit
any
message
you
want
to
update
even
if
it's
not
the
latest
message
in
order
to
do
a
git
squash
follow
these
steps
n
is
the
number
of
commits
up
to
the
last
commit
you
want
to
be
able
to
edit
git
rebase
i
head
n
once
you
squash
your
commits
choose
the
e
r
for
editing
the
message
important
note
about
interactive
rebase
when
you
use
git
rebase
i
head
n
there
can
be
more
than
n
commits
git
will
collect
all
the
commits
in
the
last
n
commits
and
if
there
was
a
merge
somewhere
in
between
that
range
you
will
see
all
the
commits
as
well
so
the
outcome
will
be
n
good
tip
if
you
have
to
do
it
for
more
than
a
single
branch
and
you
might
face
conflicts
when
amending
the
content
set
up
git
rerere
and
let
git
resolve
those
conflicts
automatically
for
you
documentation
git
commit
1
manual
page
git
rebase
1
manual
page
git
push
1
manual
page
6
how
do
i
revert
a
git
repository
to
a
previous
commit
how
do
i
revert
from
my
current
state
to
a
snapshot
made
on
a
certain
commit
if
i
do
git
log
then
i
get
the
following
output
git
log
commit
a867b4af366350be2e7c21b8de9cc6504678a61b
author
me
me
me
com
date
thu
nov
4
18
59
41
2010
0400
blah
blah
blah
commit
25eee4caef46ae64aa08e8ab3f988bc917ee1ce4
author
me
me
me
com
date
thu
nov
4
05
13
39
2010
0400
more
blah
blah
blah
commit
0766c053c0ea2035e90f504928f8df3c9363b8bd
author
me
me
me
com
date
thu
nov
4
00
55
06
2010
0400
and
yet
more
blah
blah
commit
0d1d7fc32e5a947fbd92ee598033d85bfc445a50
author
me
me
me
com
date
wed
nov
3
23
56
08
2010
0400
yep
more
blah
blah
how
do
i
revert
to
the
commit
from
november
3
i
e
commit
0d1d7fc
best
answer
this
depends
a
lot
on
what
you
mean
by
revert
temporarily
switch
to
a
different
commit
if
you
want
to
temporarily
go
back
to
it
fool
around
then
come
back
to
where
you
are
all
you
have
to
do
is
check
out
the
desired
commit
this
will
detach
your
head
that
is
leave
you
with
no
branch
checked
out
git
checkout
0d1d7fc32
or
if
you
want
to
make
commits
while
you're
there
go
ahead
and
make
a
new
branch
while
you're
at
it
git
checkout
b
old
state
0d1d7fc32
to
go
back
to
where
you
were
just
check
out
the
branch
you
were
on
again
if
you've
made
changes
as
always
when
switching
branches
you'll
have
to
deal
with
them
as
appropriate
you
could
reset
to
throw
them
away
you
could
stash
checkout
stash
pop
to
take
them
with
you
you
could
commit
them
to
a
branch
there
if
you
want
a
branch
there
hard
delete
unpublished
commits
if
on
the
other
hand
you
want
to
really
get
rid
of
everything
you've
done
since
then
there
are
two
possibilities
one
if
you
haven't
published
any
of
these
commits
simply
reset
this
will
destroy
any
local
modifications
don't
do
it
if
you
have
uncommitted
work
you
want
to
keep
git
reset
hard
0d1d7fc32
alternatively
if
there's
work
to
keep
git
stash
git
reset
hard
0d1d7fc32
git
stash
pop
this
saves
the
modifications
then
reapplies
that
patch
after
resetting
you
could
get
merge
conflicts
if
you've
modified
things
which
were
changed
since
the
commit
you
reset
to
if
you
mess
up
you've
already
thrown
away
your
local
changes
but
you
can
at
least
get
back
to
where
you
were
before
by
resetting
again
undo
published
commits
with
new
commits
on
the
other
hand
if
you've
published
the
work
you
probably
don't
want
to
reset
the
branch
since
that's
effectively
rewriting
history
in
that
case
you
could
indeed
revert
the
commits
with
git
revert
has
a
very
specific
meaning
create
a
commit
with
the
reverse
patch
to
cancel
it
out
this
way
you
don't
rewrite
any
history
this
will
create
three
separate
revert
commits
git
revert
a867b4af
25eee4ca
0766c053
it
also
takes
ranges
this
will
revert
the
last
two
commits
git
revert
head
2
head
similarly
you
can
revert
a
range
of
commits
using
commit
hashes
non
inclusive
of
first
hash
git
revert
0d1d7fc
a867b4a
reverting
a
merge
commit
git
revert
m
1
merge
commit
sha
to
get
just
one
you
could
use
rebase
i
to
squash
them
afterwards
or
you
could
do
it
manually
be
sure
to
do
this
at
top
level
of
the
repo
get
your
index
and
work
tree
into
the
desired
state
without
changing
head
git
checkout
0d1d7fc32
then
commit
be
sure
and
write
a
good
message
describing
what
you
just
did
git
commit
the
git
revert
manpage
actually
covers
a
lot
of
this
in
its
description
another
useful
link
is
this
git
scm
com
section
discussing
git
revert
if
you
decide
you
didn't
want
to
revert
after
all
you
can
revert
the
revert
as
described
here
or
reset
back
to
before
the
revert
see
the
previous
section
you
may
also
find
this
answer
helpful
in
this
case
how
can
i
move
head
back
to
a
previous
location
detached
head
undo
commits
7
how
do
i
force
“git
pull”
to
overwrite
local
files
how
do
i
force
an
overwrite
of
local
files
on
a
git
pull
the
scenario
is
the
following
a
team
member
is
modifying
the
templates
for
a
website
we
are
working
on
they
are
adding
some
images
to
the
images
directory
but
forgets
to
add
them
under
source
control
they
are
sending
the
images
by
mail
later
to
me
i'm
adding
the
images
under
the
source
control
and
pushing
them
to
github
together
with
other
changes
they
cannot
pull
updates
from
github
because
git
doesn't
want
to
overwrite
their
files
this
is
the
error
i'm
getting
error
untracked
working
tree
file
'public
images
icon
gif'
would
be
overwritten
by
merge
how
do
i
force
git
to
overwrite
them
the
person
is
a
designer
usually
i
resolve
all
the
conflicts
by
hand
so
the
server
has
the
most
recent
version
that
they
just
need
to
update
on
their
computer
best
answer
important
if
you
have
any
local
changes
they
will
be
lost
with
or
without
hard
option
any
local
commits
that
haven't
been
pushed
will
be
lost
if
you
have
any
files
that
are
not
tracked
by
git
e
g
uploaded
user
content
these
files
will
not
be
affected
first
run
a
fetch
to
update
all
origin
branch
refs
to
latest
git
fetch
all
backup
your
current
branch
git
checkout
b
backup
master
then
you
have
two
options
git
reset
hard
origin
master
or
if
you
are
on
some
other
branch
git
reset
hard
origin
branch
name
explanation
git
fetch
downloads
the
latest
from
remote
without
trying
to
merge
or
rebase
anything
then
the
git
reset
resets
the
master
branch
to
what
you
just
fetched
the
hard
option
changes
all
the
files
in
your
working
tree
to
match
the
files
in
origin
master
maintain
current
local
commits
it's
worth
noting
that
it
is
possible
to
maintain
current
local
commits
by
creating
a
branch
from
master
before
resetting
git
checkout
master
git
branch
new
branch
to
save
current
commits
git
fetch
all
git
reset
hard
origin
master
after
this
all
of
the
old
commits
will
be
kept
in
new
branch
to
save
current
commits
uncommitted
changes
uncommitted
changes
however
even
staged
will
be
lost
make
sure
to
stash
and
commit
anything
you
need
for
that
you
can
run
the
following
git
stash
and
then
to
reapply
these
uncommitted
changes
git
stash
pop
8
how
to
remove
local
untracked
files
from
the
current
git
working
tree
how
do
you
delete
untracked
local
files
from
your
current
working
tree
best
answer
git
clean
remove
untracked
files
from
the
working
tree
synopsis
git
clean
d
f
i
n
q
e
pattern
x
x
path
…​
description
cleans
the
working
tree
by
recursively
removing
files
that
are
not
under
version
control
starting
from
the
current
directory
normally
only
files
unknown
to
git
are
removed
but
if
the
x
option
is
specified
ignored
files
are
also
removed
this
can
for
example
be
useful
to
remove
all
build
products
if
any
optional
path
arguments
are
given
only
those
paths
are
affected
step
1
is
to
show
what
will
be
deleted
by
using
the
n
option
print
out
the
list
of
files
which
will
be
removed
dry
run
git
clean
n
clean
step
beware
this
will
delete
files
delete
the
files
from
the
repository
git
clean
f
to
remove
directories
run
git
clean
f
d
or
git
clean
fd
to
remove
ignored
files
run
git
clean
f
x
or
git
clean
fx
to
remove
ignored
and
non
ignored
files
run
git
clean
f
x
or
git
clean
fx
note
the
case
difference
on
the
x
for
the
two
latter
commands
if
clean
requireforce
is
set
to
true
the
default
in
your
configuration
one
needs
to
specify
f
otherwise
nothing
will
actually
happen
again
see
the
git
clean
docs
for
more
information
options
f
force
if
the
git
configuration
variable
clean
requireforce
is
not
set
to
false
git
clean
will
refuse
to
run
unless
given
f
n
or
i
x
don’t
use
the
standard
ignore
rules
read
from
gitignore
per
directory
and
git
dir
info
exclude
but
do
still
use
the
ignore
rules
given
with
e
options
this
allows
removing
all
untracked
files
including
build
products
this
can
be
used
possibly
in
conjunction
with
git
reset
to
create
a
pristine
working
directory
to
test
a
clean
build
x
remove
only
files
ignored
by
git
this
may
be
useful
to
rebuild
everything
from
scratch
but
keep
manually
created
files
n
dry
run
don’t
actually
remove
anything
just
show
what
would
be
done
d
remove
untracked
directories
in
addition
to
untracked
files
if
an
untracked
directory
is
managed
by
a
different
git
repository
it
is
not
removed
by
default
use
f
option
twice
if
you
really
want
to
remove
such
a
directory
9
how
do
i
check
out
a
remote
git
branch
somebody
pushed
a
branch
called
test
with
git
push
origin
test
to
a
shared
repository
i
can
see
the
branch
with
git
branch
r
now
i'm
trying
to
check
out
the
remote
test
branch
i've
tried
git
checkout
test
which
does
nothing
git
checkout
origin
test
gives
no
branch
which
is
confusing
how
can
i
be
on
no
branch
how
do
i
check
out
a
remote
git
branch
best
answer
with
one
remote
jakub's
answer
actually
improves
on
this
with
git
versions
≥
1
6
6
with
only
one
remote
you
can
do
git
fetch
git
checkout
test
as
user
masukomi
points
out
in
a
comment
git
checkout
test
will
not
work
in
modern
git
if
you
have
multiple
remotes
in
this
case
use
git
checkout
b
test
name
of
remote
test
or
the
shorthand
git
checkout
t
name
of
remote
test
with
1
remotes
before
you
can
start
working
locally
on
a
remote
branch
you
need
to
fetch
it
as
called
out
in
answers
below
to
fetch
a
branch
you
simply
need
to
git
fetch
origin
this
will
fetch
all
of
the
remote
branches
for
you
you
can
see
the
branches
available
for
checkout
with
git
branch
v
a
with
the
remote
branches
in
hand
you
now
need
to
check
out
the
branch
you
are
interested
in
giving
you
a
local
working
copy
git
checkout
b
test
origin
test
10
how
to
make
git
“forget”
about
a
file
that
was
tracked
but
is
now
in
gitignore
there
is
a
file
that
was
being
tracked
by
git
but
now
the
file
is
on
the
gitignore
list
however
that
file
keeps
showing
up
in
git
status
after
it's
edited
how
do
you
force
git
to
completely
forget
about
it
best
answer
gitignore
will
prevent
untracked
files
from
being
added
without
an
add
f
to
the
set
of
files
tracked
by
git
however
git
will
continue
to
track
any
files
that
are
already
being
tracked
to
stop
tracking
a
file
you
need
to
remove
it
from
the
index
this
can
be
achieved
with
this
command
git
rm
cached
file
if
you
want
to
remove
a
whole
folder
you
need
to
remove
all
files
in
it
recursively
git
rm
r
cached
folder
the
removal
of
the
file
from
the
head
revision
will
happen
on
the
next
commit
warning
while
this
will
not
remove
the
physical
file
from
your
local
it
will
remove
the
files
from
other
developers
machines
on
next
git
pull
11
move
the
most
recent
commit
s
to
a
new
branch
with
git
i'd
like
to
move
the
last
several
commits
i've
committed
to
master
to
a
new
branch
and
take
master
back
to
before
those
commits
were
made
unfortunately
my
git
fu
is
not
strong
enough
yet
any
help
i
e
how
can
i
go
from
this
master
a
b
c
d
e
to
this
newbranch
c
d
e
master
a
b
best
answer
moving
to
an
existing
branch
if
you
want
to
move
your
commits
to
an
existing
branch
it
will
look
like
this
git
checkout
existingbranch
git
merge
master
git
checkout
master
git
reset
hard
head
3
go
back
3
commits
you
will
lose
uncommitted
work
git
checkout
existingbranch
moving
to
a
new
branch
warning
this
method
works
because
you
are
creating
a
new
branch
with
the
first
command
git
branch
newbranch
if
you
want
to
move
commits
to
an
existing
branch
you
need
to
merge
your
changes
into
the
existing
branch
before
executing
git
reset
hard
head
3
see
moving
to
an
existing
branch
above
if
you
don't
merge
your
changes
first
they
will
be
lost
unless
there
are
other
circumstances
involved
this
can
be
easily
done
by
branching
and
rolling
back
note
any
changes
not
committed
will
be
lost
git
branch
newbranch
create
a
new
branch
saving
the
desired
commits
git
reset
hard
head
3
move
master
back
by
3
commits
make
sure
you
know
how
many
commits
you
need
to
go
back
git
checkout
newbranch
go
to
the
new
branch
that
still
has
the
desired
commits
but
do
make
sure
how
many
commits
to
go
back
alternatively
you
can
instead
of
head
3
simply
provide
the
hash
of
the
commit
or
the
reference
like
origin
master
you
want
to
revert
back
to
on
the
master
current
branch
e
g
git
reset
hard
a1b2c3d4
1
you
will
only
be
losing
commits
from
the
master
branch
but
don't
worry
you'll
have
those
commits
in
newbranch
warning
with
git
version
2
0
and
later
if
you
later
git
rebase
the
new
branch
upon
the
original
master
branch
you
may
need
an
explicit
no
fork
point
option
during
the
rebase
to
avoid
losing
the
carried
over
commits
having
branch
autosetuprebase
always
set
makes
this
more
likely
see
john
mellor's
answer
for
details
12
how
do
i
discard
unstaged
changes
in
git
how
do
i
discard
changes
in
my
working
copy
that
are
not
in
the
index
best
answer
for
all
unstaged
files
in
current
working
directory
use
git
checkout
for
a
specific
file
use
git
checkout
path
to
file
to
revert
here
to
remove
argument
ambiguation
13
how
to
resolve
merge
conflicts
in
git
how
do
i
resolve
merge
conflicts
in
git
best
answer
try
git
mergetool
it
opens
a
gui
that
steps
you
through
each
conflict
and
you
get
to
choose
how
to
merge
sometimes
it
requires
a
bit
of
hand
editing
afterwards
but
usually
it's
enough
by
itself
it
is
much
better
than
doing
the
whole
thing
by
hand
certainly
as
per
joshglover
comment
the
command
doesn't
necessarily
open
a
gui
unless
you
install
one
running
git
mergetool
for
me
resulted
in
vimdiff
being
used
you
can
install
one
of
the
following
tools
to
use
it
instead
meld
opendiff
kdiff3
tkdiff
xxdiff
tortoisemerge
gvimdiff
diffuse
ecmerge
p4merge
araxis
vimdiff
emerge
below
is
the
sample
procedure
to
use
vimdiff
for
resolve
merge
conflicts
based
on
this
link
step
1
run
following
commands
in
your
terminal
git
config
merge
tool
vimdiff
git
config
merge
conflictstyle
diff3
git
config
mergetool
prompt
false
this
will
set
vimdiff
as
the
default
merge
tool
step
2
run
following
command
in
terminal
git
mergetool
step
3
you
will
see
a
vimdiff
display
in
following
format
╔═══════╦══════╦════════╗
║
║
║
║
║
local
║
base
║
remote
║
║
║
║
║
╠═══════╩══════╩════════╣
║
║
║
merged
║
║
║
╚═══════════════════════╝
these
4
views
are
local
–
this
is
file
from
the
current
branch
base
–
common
ancestor
how
file
looked
before
both
changes
remote
–
file
you
are
merging
into
your
branch
merged
–
merge
result
this
is
what
gets
saved
in
the
repo
you
can
navigate
among
these
views
using
ctrl
w
you
can
directly
reach
merged
view
using
ctrl
w
followed
by
j
more
info
about
vimdiff
navigation
here
and
here
step
4
you
could
edit
the
merged
view
the
following
way
if
you
want
to
get
changes
from
remote
diffg
re
if
you
want
to
get
changes
from
base
diffg
ba
if
you
want
to
get
changes
from
local
diffg
lo
step
5
save
exit
commit
and
clean
up
wqa
save
and
exit
from
vi
git
commit
m
message
git
clean
remove
extra
files
e
g
orig
created
by
diff
tool
14
how
can
i
reset
or
revert
a
file
to
a
specific
revision
i
have
made
some
changes
to
a
file
which
has
been
committed
a
few
times
as
part
of
a
group
of
files
but
now
want
to
reset
revert
the
changes
on
it
back
to
a
previous
version
i
have
done
a
git
log
along
with
a
git
diff
to
find
the
revision
i
need
but
just
have
no
idea
how
to
get
the
file
back
to
its
former
state
in
the
past
best
answer
assuming
the
hash
of
the
commit
you
want
is
c5f567
git
checkout
c5f567
file1
to
restore
file2
to
restore
the
git
checkout
man
page
gives
more
information
if
you
want
to
revert
to
the
commit
before
c5f567
append
1
where
1
is
the
number
of
commits
you
want
to
go
back
it
can
be
anything
git
checkout
c5f567
1
file1
to
restore
file2
to
restore
as
a
side
note
i've
always
been
uncomfortable
with
this
command
because
it's
used
for
both
ordinary
things
changing
between
branches
and
unusual
destructive
things
discarding
changes
in
the
working
directory
15
how
do
i
push
a
new
local
branch
to
a
remote
git
repository
and
track
it
too
i
want
to
be
able
to
do
the
following
1
create
a
local
branch
based
on
some
other
remote
or
local
branch
via
git
branch
or
git
checkout
b
2
push
the
local
branch
to
the
remote
repository
publish
but
make
it
trackable
so
git
pull
and
git
push
will
work
immediately
how
do
i
do
that
i
know
about
set
upstream
in
git
1
7
but
that
is
a
post
creation
action
i
want
to
find
a
way
to
make
a
similar
change
when
pushing
the
branch
to
the
remote
repository
best
answer
in
git
1
7
0
and
later
you
can
checkout
a
new
branch
git
checkout
b
branch
edit
files
add
and
commit
then
push
with
the
u
short
for
set
upstream
option
git
push
u
origin
branch
git
will
set
up
the
tracking
information
during
the
push
16
how
can
i
add
an
empty
directory
to
a
git
repository
how
can
i
add
an
empty
directory
that
contains
no
files
to
a
git
repository
best
answer
another
way
to
make
a
directory
stay
almost
empty
in
the
repository
is
to
create
a
gitignore
file
inside
that
directory
that
contains
these
four
lines
ignore
everything
in
this
directory
except
this
file
gitignore
then
you
don't
have
to
get
the
order
right
the
way
that
you
have
to
do
in
m104's
solution
this
also
gives
the
benefit
that
files
in
that
directory
won't
show
up
as
untracked
when
you
do
a
git
status
making
greenasjade's
comment
persistent
i
think
it's
worth
noting
that
this
solution
does
precisely
what
the
question
asked
for
but
is
not
perhaps
what
many
people
looking
at
this
question
will
have
been
looking
for
this
solution
guarantees
that
the
directory
remains
empty
it
says
i
truly
never
want
files
checked
in
here
as
opposed
to
i
don't
have
any
files
to
check
in
here
yet
but
i
need
the
directory
here
files
may
be
coming
later
17
how
can
i
determine
the
url
that
a
local
git
repository
was
originally
cloned
from
i
pulled
a
project
from
github
a
few
days
ago
i've
since
discovered
that
there
are
several
forks
on
github
and
i
neglected
to
note
which
one
i
took
originally
how
can
i
determine
which
of
those
forks
i
pulled
best
answer
if
you
want
only
the
remote
url
or
if
your
are
not
connected
to
a
network
that
can
reach
the
remote
repo
git
config
get
remote
origin
url
if
you
require
full
output
and
you
are
on
a
network
that
can
reach
the
remote
repo
where
the
origin
resides
git
remote
show
origin
when
using
git
clone
from
github
or
any
source
repository
for
that
matter
the
default
name
for
the
source
of
the
clone
is
origin
using
git
remote
show
will
display
the
information
about
this
remote
name
the
first
few
lines
should
show
c
users
jaredpar
vsvim
git
remote
show
origin
remote
origin
fetch
url
git
github
com
jaredpar
vsvim
git
push
url
git
github
com
jaredpar
vsvim
git
head
branch
master
remote
branches
if
you
want
to
use
the
value
in
the
script
you
would
use
the
first
command
listed
in
this
answer
18
how
to
clone
all
remote
branches
in
git
i
have
a
master
and
a
development
branch
both
pushed
to
github
i've
cloned
pulled
and
fetched
but
i
remain
unable
to
get
anything
other
than
the
master
branch
back
i'm
sure
i'm
missing
something
obvious
but
i
have
read
the
manual
and
i'm
getting
no
joy
at
all
best
answer
first
clone
a
remote
git
repository
and
cd
into
it
git
clone
git
example
com
myproject
cd
myproject
next
look
at
the
local
branches
in
your
repository
git
branch
master
but
there
are
other
branches
hiding
in
your
repository
you
can
see
these
using
the
a
flag
git
branch
a
master
remotes
origin
head
remotes
origin
master
remotes
origin
v1
0
stable
remotes
origin
experimental
if
you
just
want
to
take
a
quick
peek
at
an
upstream
branch
you
can
check
it
out
directly
git
checkout
origin
experimental
but
if
you
want
to
work
on
that
branch
you'll
need
to
create
a
local
tracking
branch
which
is
done
automatically
by
git
checkout
experimental
and
you
will
see
branch
experimental
set
up
to
track
remote
branch
experimental
from
origin
switched
to
a
new
branch
'experimental'
here
new
branch
simply
means
that
the
branch
is
taken
from
the
index
and
created
locally
for
you
as
the
previous
line
tells
you
the
branch
is
being
set
up
to
track
the
remote
branch
which
usually
means
the
origin
branch
name
branch
now
if
you
look
at
your
local
branches
this
is
what
you'll
see
git
branch
experimental
master
you
can
actually
track
more
than
one
remote
repository
using
git
remote
git
remote
add
win32
git
example
com
users
joe
myproject
win32
port
git
branch
a
master
remotes
origin
head
remotes
origin
master
remotes
origin
v1
0
stable
remotes
origin
experimental
remotes
win32
master
remotes
win32
new
widgets
at
this
point
things
are
getting
pretty
crazy
so
run
gitk
to
see
what's
going
on
gitk
all
19
how
to
change
the
uri
url
for
a
remote
git
repository
i
have
a
repo
origin
on
a
usb
key
that
i
cloned
on
my
hard
drive
local
i
moved
origin
to
a
nas
and
successfully
tested
cloning
it
from
here
i
would
like
to
know
if
i
can
change
the
uri
of
origin
in
the
settings
of
local
so
it
will
now
pull
from
the
nas
and
not
from
the
usb
key
for
now
i
can
see
two
solutions
push
everything
to
the
usb
orign
and
copy
it
to
the
nas
again
implies
a
lot
of
work
due
to
new
commits
to
nas
origin
add
a
new
remote
to
local
and
delete
the
old
one
i
fear
i'll
break
my
history
best
answer
you
can
git
remote
set
url
origin
new
git
url
here
see
git
help
remote
or
you
can
edit
git
config
and
change
the
urls
there
you're
not
in
any
danger
of
losing
history
unless
you
do
something
very
silly
and
if
you're
worried
just
make
a
copy
of
your
repo
since
your
repo
is
your
history
20
reset
local
repository
branch
to
be
just
like
remote
repository
head
how
do
i
reset
my
local
branch
to
be
just
like
the
branch
on
the
remote
repository
i
did
git
reset
hard
head
but
when
i
run
a
git
status
on
branch
master
changes
to
be
committed
use
git
reset
head
file
to
unstage
modified
java
com
mycompany
testcontacts
java
modified
java
com
mycompany
testparser
java
can
you
please
tell
me
why
i
have
these
'modified'
i
haven't
touched
these
files
if
i
did
i
want
to
remove
those
best
answer
setting
your
branch
to
exactly
match
the
remote
branch
can
be
done
in
two
steps
git
fetch
origin
git
reset
hard
origin
master
if
you
want
to
save
your
current
branch's
state
before
doing
this
just
in
case
you
can
do
git
commit
a
m
saving
my
work
just
in
case
git
branch
my
saved
work
now
your
work
is
saved
on
the
branch
my
saved
work
in
case
you
decide
you
want
it
back
or
want
to
look
at
it
later
or
diff
it
against
your
updated
branch
note
that
the
first
example
assumes
that
the
remote
repo's
name
is
origin
and
that
the
branch
named
master
in
the
remote
repo
matches
the
currently
checked
out
branch
in
your
local
repo
btw
this
situation
that
you're
in
looks
an
awful
lot
like
a
common
case
where
a
push
has
been
done
into
the
currently
checked
out
branch
of
a
non
bare
repository
did
you
recently
push
into
your
local
repo
if
not
then
no
worries
something
else
must
have
caused
these
files
to
unexpectedly
end
up
modified
otherwise
you
should
be
aware
that
it's
not
recommended
to
push
into
a
non
bare
repository
and
not
into
the
currently
checked
out
branch
in
particular