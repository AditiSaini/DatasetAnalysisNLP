stackoverflow
questions
git
related
1
undo
recent
local
commits
git
accidentally
committed
wrong
files
git
pushed
commit
server
yet
undo
commits
local
repository
best
answer
undo
commit
redo
git
commit
something
terribly
misguided
1
git
reset
head
2
edit
files
necessary
3
git
add
4
git
commit
c
orig
head
5
1
want
undo
2
nothing
working
tree
state
files
disk
undoes
commit
leaves
changes
committed
unstaged
they'll
appear
changes
staged
commit
git
status
need
add
committing
want
add
changes
previous
commit
change
commit
message1
could
use
git
reset
soft
head
instead
like
git
reset
head
2
leaves
existing
changes
staged
3
make
corrections
working
tree
files
4
git
add
anything
want
include
new
commit
5
commit
changes
reusing
old
commit
message
reset
copied
old
head
git
orig
head
commit
c
orig
head
open
editor
initially
contains
log
message
old
commit
allows
edit
need
edit
message
could
use
c
option
beware
however
added
new
changes
index
using
commit
amend
add
previous
commit
code
already
pushed
server
permissions
overwrite
history
rebase
git
push
origin
master
force
also
look
answer
move
head
back
previous
location
detached
head
undo
commits
answer
show
git
reflog
use
determine
sha
1
commit
wish
revert
value
use
sequence
commands
explained
1
note
however
need
reset
earlier
commit
made
mistake
commit
message
easier
option
git
reset
unstage
changes
made
since
git
commit
amend
open
default
commit
message
editor
pre
populated
last
commit
message
2
head
head
1
also
see
head
git
helpful
want
uncommit
multiple
commits
2
difference
'git
pull'
'git
fetch'
differences
git
pull
git
fetch
best
answer
simplest
terms
git
pull
git
fetch
followed
git
merge
git
fetch
time
update
remote
tracking
branches
refs
remotes
remote
operation
never
changes
local
branches
refs
heads
safe
without
changing
working
copy
even
heard
people
running
git
fetch
periodically
cron
job
background
although
recommend
git
pull
would
bring
local
branch
date
remote
version
also
updating
remote
tracking
branches
git
documentation
git
pull
default
mode
git
pull
shorthand
git
fetch
followed
git
merge
fetch
head
3
update
github
forked
repository
recently
forked
project
applied
several
fixes
created
pull
request
accepted
days
later
another
change
made
another
contributor
fork
contain
change
get
change
fork
need
delete
create
fork
changes
contribute
update
button
best
answer
local
clone
forked
repository
add
original
github
repository
remote
remotes
like
nicknames
urls
repositories
origin
one
example
fetch
branches
upstream
repository
rebase
work
continue
working
upstream
version
terms
commands
might
look
like
add
remote
call
upstream
git
remote
add
upstream
https
github
com
whoever
whatever
git
fetch
branches
remote
remote
tracking
branches
upstream
main
upstream
master
git
fetch
upstream
make
sure
main
branch
git
checkout
main
rewrite
main
branch
commits
already
upstream
main
replayed
top
branch
git
rebase
upstream
main
want
rewrite
history
main
branch
example
people
may
cloned
replace
last
command
git
merge
upstream
main
however
making
pull
requests
clean
possible
probably
better
rebase
rebased
branch
onto
upstream
main
may
need
force
push
order
push
forked
repository
github
git
push
f
origin
main
need
use
f
first
time
rebased
4
undo
'git
add'
commit
mistakenly
added
files
git
using
command
git
add
myfile
txt
yet
run
git
commit
way
undo
files
included
commit
best
answer
undo
git
add
commit
git
reset
file
remove
current
index
committed
list
without
changing
anything
else
use
git
reset
without
file
name
unstage
due
changes
come
handy
many
files
listed
one
one
reasonable
amount
time
old
versions
git
commands
equivalent
git
reset
head
file
git
reset
head
respectively
fail
head
undefined
yet
made
commits
repository
ambiguous
created
branch
called
head
stupid
thing
changed
git
1
8
2
though
modern
versions
git
use
commands
even
prior
making
first
commit
git
reset
without
options
parameters
used
error
commits
history
gives
empty
index
match
non
existent
commit
even
5
modify
existing
unpushed
commit
messages
wrote
wrong
thing
commit
message
change
message
commit
pushed
yet
best
answer
amending
recent
commit
message
git
commit
amend
open
editor
allowing
change
commit
message
recent
commit
additionally
set
commit
message
directly
command
line
git
commit
amend
new
commit
message
…however
make
multi
line
commit
messages
small
corrections
cumbersome
enter
make
sure
working
copy
changes
staged
get
committed
unstaged
changes
get
committed
changing
message
commit
already
pushed
remote
branch
already
pushed
commit
remote
branch
amending
commit
locally
described
also
need
force
push
commit
git
push
remote
branch
force
git
push
remote
branch
f
warning
force
pushing
overwrite
remote
branch
state
local
one
commits
remote
branch
local
branch
lose
commits
warning
cautious
amending
commits
already
shared
people
amending
commits
essentially
rewrites
different
sha
ids
poses
problem
people
copies
old
commit
rewritten
anyone
copy
old
commit
need
synchronize
work
newly
written
commit
sometimes
difficult
make
sure
coordinate
others
attempting
rewrite
shared
commit
history
avoid
rewriting
shared
commits
altogether
perform
interactive
rebase
another
option
use
interactive
rebase
allows
edit
message
want
update
even
latest
message
order
git
squash
follow
steps
n
number
commits
last
commit
want
able
edit
git
rebase
head
n
squash
commits
choose
e
r
editing
message
important
note
interactive
rebase
use
git
rebase
head
n
n
commits
git
collect
commits
last
n
commits
merge
somewhere
range
see
commits
well
outcome
n
good
tip
single
branch
might
face
conflicts
amending
content
set
git
rerere
let
git
resolve
conflicts
automatically
documentation
git
commit
1
manual
page
git
rebase
1
manual
page
git
push
1
manual
page
6
revert
git
repository
previous
commit
revert
current
state
snapshot
made
certain
commit
git
log
get
following
output
git
log
commit
a867b4af366350be2e7c21b8de9cc6504678a61b
author
com
date
thu
nov
4
18
59
41
2010
0400
blah
blah
blah
commit
25eee4caef46ae64aa08e8ab3f988bc917ee1ce4
author
com
date
thu
nov
4
05
13
39
2010
0400
blah
blah
blah
commit
0766c053c0ea2035e90f504928f8df3c9363b8bd
author
com
date
thu
nov
4
00
55
06
2010
0400
yet
blah
blah
commit
0d1d7fc32e5a947fbd92ee598033d85bfc445a50
author
com
date
wed
nov
3
23
56
08
2010
0400
yep
blah
blah
revert
commit
november
3
e
commit
0d1d7fc
best
answer
depends
lot
mean
revert
temporarily
switch
different
commit
want
temporarily
go
back
fool
around
come
back
check
desired
commit
detach
head
leave
branch
checked
git
checkout
0d1d7fc32
want
make
commits
go
ahead
make
new
branch
git
checkout
b
old
state
0d1d7fc32
go
back
check
branch
made
changes
always
switching
branches
deal
appropriate
could
reset
throw
away
could
stash
checkout
stash
pop
take
could
commit
branch
want
branch
hard
delete
unpublished
commits
hand
want
really
get
rid
everything
done
since
two
possibilities
one
published
commits
simply
reset
destroy
local
modifications
uncommitted
work
want
keep
git
reset
hard
0d1d7fc32
alternatively
there's
work
keep
git
stash
git
reset
hard
0d1d7fc32
git
stash
pop
saves
modifications
reapplies
patch
resetting
could
get
merge
conflicts
modified
things
changed
since
commit
reset
mess
already
thrown
away
local
changes
least
get
back
resetting
undo
published
commits
new
commits
hand
published
work
probably
want
reset
branch
since
that's
effectively
rewriting
history
case
could
indeed
revert
commits
git
revert
specific
meaning
create
commit
reverse
patch
cancel
way
rewrite
history
create
three
separate
revert
commits
git
revert
a867b4af
25eee4ca
0766c053
also
takes
ranges
revert
last
two
commits
git
revert
head
2
head
similarly
revert
range
commits
using
commit
hashes
non
inclusive
first
hash
git
revert
0d1d7fc
a867b4a
reverting
merge
commit
git
revert
1
merge
commit
sha
get
one
could
use
rebase
squash
afterwards
could
manually
sure
top
level
repo
get
index
work
tree
desired
state
without
changing
head
git
checkout
0d1d7fc32
commit
sure
write
good
message
describing
git
commit
git
revert
manpage
actually
covers
lot
description
another
useful
link
git
scm
com
section
discussing
git
revert
decide
want
revert
revert
revert
described
reset
back
revert
see
previous
section
may
also
find
answer
helpful
case
move
head
back
previous
location
detached
head
undo
commits
7
force
“git
pull”
overwrite
local
files
force
overwrite
local
files
git
pull
scenario
following
team
member
modifying
templates
website
working
adding
images
images
directory
forgets
add
source
control
sending
images
mail
later
i'm
adding
images
source
control
pushing
github
together
changes
cannot
pull
updates
github
git
want
overwrite
files
error
i'm
getting
error
untracked
working
tree
file
'public
images
icon
gif'
would
overwritten
merge
force
git
overwrite
person
designer
usually
resolve
conflicts
hand
server
recent
version
need
update
computer
best
answer
important
local
changes
lost
without
hard
option
local
commits
pushed
lost
files
tracked
git
e
g
uploaded
user
content
files
affected
first
run
fetch
update
origin
branch
refs
latest
git
fetch
backup
current
branch
git
checkout
b
backup
master
two
options
git
reset
hard
origin
master
branch
git
reset
hard
origin
branch
name
explanation
git
fetch
downloads
latest
remote
without
trying
merge
rebase
anything
git
reset
resets
master
branch
fetched
hard
option
changes
files
working
tree
match
files
origin
master
maintain
current
local
commits
worth
noting
possible
maintain
current
local
commits
creating
branch
master
resetting
git
checkout
master
git
branch
new
branch
save
current
commits
git
fetch
git
reset
hard
origin
master
old
commits
kept
new
branch
save
current
commits
uncommitted
changes
uncommitted
changes
however
even
staged
lost
make
sure
stash
commit
anything
need
run
following
git
stash
reapply
uncommitted
changes
git
stash
pop
8
remove
local
untracked
files
current
git
working
tree
delete
untracked
local
files
current
working
tree
best
answer
git
clean
remove
untracked
files
working
tree
synopsis
git
clean
f
n
q
e
pattern
x
x
path
…​
description
cleans
working
tree
recursively
removing
files
version
control
starting
current
directory
normally
files
unknown
git
removed
x
option
specified
ignored
files
also
removed
example
useful
remove
build
products
optional
path
arguments
given
paths
affected
step
1
show
deleted
using
n
option
print
list
files
removed
dry
run
git
clean
n
clean
step
beware
delete
files
delete
files
repository
git
clean
f
remove
directories
run
git
clean
f
git
clean
fd
remove
ignored
files
run
git
clean
f
x
git
clean
fx
remove
ignored
non
ignored
files
run
git
clean
f
x
git
clean
fx
note
case
difference
x
two
latter
commands
clean
requireforce
set
true
default
configuration
one
needs
specify
f
otherwise
nothing
actually
happen
see
git
clean
docs
information
options
f
force
git
configuration
variable
clean
requireforce
set
false
git
clean
refuse
run
unless
given
f
n
x
don’t
use
standard
ignore
rules
read
gitignore
per
directory
git
dir
info
exclude
still
use
ignore
rules
given
e
options
allows
removing
untracked
files
including
build
products
used
possibly
conjunction
git
reset
create
pristine
working
directory
test
clean
build
x
remove
files
ignored
git
may
useful
rebuild
everything
scratch
keep
manually
created
files
n
dry
run
don’t
actually
remove
anything
show
would
done
remove
untracked
directories
addition
untracked
files
untracked
directory
managed
different
git
repository
removed
default
use
f
option
twice
really
want
remove
directory
9
check
remote
git
branch
somebody
pushed
branch
called
test
git
push
origin
test
shared
repository
see
branch
git
branch
r
i'm
trying
check
remote
test
branch
i've
tried
git
checkout
test
nothing
git
checkout
origin
test
gives
branch
confusing
branch
check
remote
git
branch
best
answer
one
remote
jakub's
answer
actually
improves
git
versions
≥
1
6
6
one
remote
git
fetch
git
checkout
test
user
masukomi
points
comment
git
checkout
test
work
modern
git
multiple
remotes
case
use
git
checkout
b
test
name
remote
test
shorthand
git
checkout
name
remote
test
1
remotes
start
working
locally
remote
branch
need
fetch
called
answers
fetch
branch
simply
need
git
fetch
origin
fetch
remote
branches
see
branches
available
checkout
git
branch
v
remote
branches
hand
need
check
branch
interested
giving
local
working
copy
git
checkout
b
test
origin
test
10
make
git
“forget”
file
tracked
gitignore
file
tracked
git
file
gitignore
list
however
file
keeps
showing
git
status
edited
force
git
completely
forget
best
answer
gitignore
prevent
untracked
files
added
without
add
f
set
files
tracked
git
however
git
continue
track
files
already
tracked
stop
tracking
file
need
remove
index
achieved
command
git
rm
cached
file
want
remove
whole
folder
need
remove
files
recursively
git
rm
r
cached
folder
removal
file
head
revision
happen
next
commit
warning
remove
physical
file
local
remove
files
developers
machines
next
git
pull
11
move
recent
commit
new
branch
git
i'd
like
move
last
several
commits
i've
committed
master
new
branch
take
master
back
commits
made
unfortunately
git
fu
strong
enough
yet
help
e
go
master
b
c
e
newbranch
c
e
master
b
best
answer
moving
existing
branch
want
move
commits
existing
branch
look
like
git
checkout
existingbranch
git
merge
master
git
checkout
master
git
reset
hard
head
3
go
back
3
commits
lose
uncommitted
work
git
checkout
existingbranch
moving
new
branch
warning
method
works
creating
new
branch
first
command
git
branch
newbranch
want
move
commits
existing
branch
need
merge
changes
existing
branch
executing
git
reset
hard
head
3
see
moving
existing
branch
merge
changes
first
lost
unless
circumstances
involved
easily
done
branching
rolling
back
note
changes
committed
lost
git
branch
newbranch
create
new
branch
saving
desired
commits
git
reset
hard
head
3
move
master
back
3
commits
make
sure
know
many
commits
need
go
back
git
checkout
newbranch
go
new
branch
still
desired
commits
make
sure
many
commits
go
back
alternatively
instead
head
3
simply
provide
hash
commit
reference
like
origin
master
want
revert
back
master
current
branch
e
g
git
reset
hard
a1b2c3d4
1
losing
commits
master
branch
worry
commits
newbranch
warning
git
version
2
0
later
later
git
rebase
new
branch
upon
original
master
branch
may
need
explicit
fork
point
option
rebase
avoid
losing
carried
commits
branch
autosetuprebase
always
set
makes
likely
see
john
mellor's
answer
details
12
discard
unstaged
changes
git
discard
changes
working
copy
index
best
answer
unstaged
files
current
working
directory
use
git
checkout
specific
file
use
git
checkout
path
file
revert
remove
argument
ambiguation
13
resolve
merge
conflicts
git
resolve
merge
conflicts
git
best
answer
try
git
mergetool
opens
gui
steps
conflict
get
choose
merge
sometimes
requires
bit
hand
editing
afterwards
usually
enough
much
better
whole
thing
hand
certainly
per
joshglover
comment
command
necessarily
open
gui
unless
install
one
running
git
mergetool
resulted
vimdiff
used
install
one
following
tools
use
instead
meld
opendiff
kdiff3
tkdiff
xxdiff
tortoisemerge
gvimdiff
diffuse
ecmerge
p4merge
araxis
vimdiff
emerge
sample
procedure
use
vimdiff
resolve
merge
conflicts
based
link
step
1
run
following
commands
terminal
git
config
merge
tool
vimdiff
git
config
merge
conflictstyle
diff3
git
config
mergetool
prompt
false
set
vimdiff
default
merge
tool
step
2
run
following
command
terminal
git
mergetool
step
3
see
vimdiff
display
following
format
╔═══════╦══════╦════════╗
║
║
║
║
║
local
║
base
║
remote
║
║
║
║
║
╠═══════╩══════╩════════╣
║
║
║
merged
║
║
║
╚═══════════════════════╝
4
views
local
–
file
current
branch
base
–
common
ancestor
file
looked
changes
remote
–
file
merging
branch
merged
–
merge
result
gets
saved
repo
navigate
among
views
using
ctrl
w
directly
reach
merged
view
using
ctrl
w
followed
j
info
vimdiff
navigation
step
4
could
edit
merged
view
following
way
want
get
changes
remote
diffg
want
get
changes
base
diffg
ba
want
get
changes
local
diffg
lo
step
5
save
exit
commit
clean
wqa
save
exit
vi
git
commit
message
git
clean
remove
extra
files
e
g
orig
created
diff
tool
14
reset
revert
file
specific
revision
made
changes
file
committed
times
part
group
files
want
reset
revert
changes
back
previous
version
done
git
log
along
git
diff
find
revision
need
idea
get
file
back
former
state
past
best
answer
assuming
hash
commit
want
c5f567
git
checkout
c5f567
file1
restore
file2
restore
git
checkout
man
page
gives
information
want
revert
commit
c5f567
append
1
1
number
commits
want
go
back
anything
git
checkout
c5f567
1
file1
restore
file2
restore
side
note
i've
always
uncomfortable
command
used
ordinary
things
changing
branches
unusual
destructive
things
discarding
changes
working
directory
15
push
new
local
branch
remote
git
repository
track
want
able
following
1
create
local
branch
based
remote
local
branch
via
git
branch
git
checkout
b
2
push
local
branch
remote
repository
publish
make
trackable
git
pull
git
push
work
immediately
know
set
upstream
git
1
7
post
creation
action
want
find
way
make
similar
change
pushing
branch
remote
repository
best
answer
git
1
7
0
later
checkout
new
branch
git
checkout
b
branch
edit
files
add
commit
push
u
short
set
upstream
option
git
push
u
origin
branch
git
set
tracking
information
push
16
add
empty
directory
git
repository
add
empty
directory
contains
files
git
repository
best
answer
another
way
make
directory
stay
almost
empty
repository
create
gitignore
file
inside
directory
contains
four
lines
ignore
everything
directory
except
file
gitignore
get
order
right
way
m104's
solution
also
gives
benefit
files
directory
show
untracked
git
status
making
greenasjade's
comment
persistent
think
worth
noting
solution
precisely
question
asked
perhaps
many
people
looking
question
looking
solution
guarantees
directory
remains
empty
says
truly
never
want
files
checked
opposed
files
check
yet
need
directory
files
may
coming
later
17
determine
url
local
git
repository
originally
cloned
pulled
project
github
days
ago
i've
since
discovered
several
forks
github
neglected
note
one
took
originally
determine
forks
pulled
best
answer
want
remote
url
connected
network
reach
remote
repo
git
config
get
remote
origin
url
require
full
output
network
reach
remote
repo
origin
resides
git
remote
show
origin
using
git
clone
github
source
repository
matter
default
name
source
clone
origin
using
git
remote
show
display
information
remote
name
first
lines
show
c
users
jaredpar
vsvim
git
remote
show
origin
remote
origin
fetch
url
git
github
com
jaredpar
vsvim
git
push
url
git
github
com
jaredpar
vsvim
git
head
branch
master
remote
branches
want
use
value
script
would
use
first
command
listed
answer
18
clone
remote
branches
git
master
development
branch
pushed
github
i've
cloned
pulled
fetched
remain
unable
get
anything
master
branch
back
i'm
sure
i'm
missing
something
obvious
read
manual
i'm
getting
joy
best
answer
first
clone
remote
git
repository
cd
git
clone
git
example
com
myproject
cd
myproject
next
look
local
branches
repository
git
branch
master
branches
hiding
repository
see
using
flag
git
branch
master
remotes
origin
head
remotes
origin
master
remotes
origin
v1
0
stable
remotes
origin
experimental
want
take
quick
peek
upstream
branch
check
directly
git
checkout
origin
experimental
want
work
branch
need
create
local
tracking
branch
done
automatically
git
checkout
experimental
see
branch
experimental
set
track
remote
branch
experimental
origin
switched
new
branch
'experimental'
new
branch
simply
means
branch
taken
index
created
locally
previous
line
tells
branch
set
track
remote
branch
usually
means
origin
branch
name
branch
look
local
branches
see
git
branch
experimental
master
actually
track
one
remote
repository
using
git
remote
git
remote
add
win32
git
example
com
users
joe
myproject
win32
port
git
branch
master
remotes
origin
head
remotes
origin
master
remotes
origin
v1
0
stable
remotes
origin
experimental
remotes
win32
master
remotes
win32
new
widgets
point
things
getting
pretty
crazy
run
gitk
see
what's
going
gitk
19
change
uri
url
remote
git
repository
repo
origin
usb
key
cloned
hard
drive
local
moved
origin
nas
successfully
tested
cloning
would
like
know
change
uri
origin
settings
local
pull
nas
usb
key
see
two
solutions
push
everything
usb
orign
copy
nas
implies
lot
work
due
new
commits
nas
origin
add
new
remote
local
delete
old
one
fear
i'll
break
history
best
answer
git
remote
set
url
origin
new
git
url
see
git
help
remote
edit
git
config
change
urls
danger
losing
history
unless
something
silly
worried
make
copy
repo
since
repo
history
20
reset
local
repository
branch
like
remote
repository
head
reset
local
branch
like
branch
remote
repository
git
reset
hard
head
run
git
status
branch
master
changes
committed
use
git
reset
head
file
unstage
modified
java
com
mycompany
testcontacts
java
modified
java
com
mycompany
testparser
java
please
tell
'modified'
touched
files
want
remove
best
answer
setting
branch
exactly
match
remote
branch
done
two
steps
git
fetch
origin
git
reset
hard
origin
master
want
save
current
branch's
state
case
git
commit
saving
work
case
git
branch
saved
work
work
saved
branch
saved
work
case
decide
want
back
want
look
later
diff
updated
branch
note
first
example
assumes
remote
repo's
name
origin
branch
named
master
remote
repo
matches
currently
checked
branch
local
repo
btw
situation
looks
awful
lot
like
common
case
push
done
currently
checked
branch
non
bare
repository
recently
push
local
repo
worries
something
else
must
caused
files
unexpectedly
end
modified
otherwise
aware
recommended
push
non
bare
repository
currently
checked
branch
particular